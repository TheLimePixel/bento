======= Function(types::main::foo) =======
FunctionDef {
  ref: FunDef@0..49
  params: [
    Param {
      ref: Param@2..17
      pattern: IdentPattern {
        ref: IdentPattern@0..3
        local: $0
      }
      type: TypeRef {
        ref: Path@4..14
        type: SingletonType {
          types::types::Foo
        }
      }
    }
  ]
  returnType: null
  body: CallExpr {
    ref: CallExpr@54..76
    on: PathExpr {
      ref: Path@0..7
      binding: Accessor {
        of: Function {
          bento::io::println
        }
        type: Get
      }
    }
    args: [
      StringExpr {
        ref: StringLiteral@2..15
        content: "Foooooooooo"
      }
    ]
  }
}

======= Function(types::main::printBar) =======
FunctionDef {
  ref: FunDef@0..49
  params: [
    Param {
      ref: Param@2..17
      pattern: IdentPattern {
        ref: IdentPattern@0..3
        local: $0
      }
      type: TypeRef {
        ref: Path@4..14
        type: RecordType {
          types::types::Bar
        }
      }
    }
  ]
  returnType: null
  body: CallExpr {
    ref: CallExpr@64..81
    on: PathExpr {
      ref: Path@0..7
      binding: Accessor {
        of: Function {
          bento::io::println
        }
        type: Get
      }
    }
    args: [
      AccessExpr {
        ref: AccessExpr@2..10
        on: PathExpr {
          ref: Path@0..3
          binding: Accessor {
            of: $0
            type: Get
          }
        }
        field: name
      }
    ]
  }
}

======= Function(types::main::main) =======
FunctionDef {
  ref: FunDef@0..71
  params: []
  returnType: null
  body: ScopeExpr {
    ref: ScopeExpr@26..84
    statements: [
      CallExpr {
        ref: CallExpr@14..29
        on: PathExpr {
          ref: Path@0..3
          binding: Accessor {
            of: Function {
              types::main::foo
            }
            type: Get
          }
        }
        args: [
          PathExpr {
            ref: Path@2..12
            binding: Accessor {
              of: SingletonType {
                types::types::Foo
              }
              type: Get
            }
          }
        ]
      }
      CallExpr {
        ref: CallExpr@56..83
        on: PathExpr {
          ref: Path@0..8
          binding: Accessor {
            of: Function {
              types::main::printBar
            }
            type: Get
          }
        }
        args: [
          CallExpr {
            ref: CallExpr@2..19
            on: PathExpr {
              ref: Path@0..10
              binding: Accessor {
                of: RecordType {
                  types::types::Bar
                }
                type: Get
              }
            }
            args: [
              StringExpr {
                ref: StringLiteral@2..7
                content: "Bar"
              }
            ]
          }
        ]
      }
    ]
  }
}