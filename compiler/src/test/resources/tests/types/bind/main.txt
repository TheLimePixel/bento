======= types::main::foo =======
FunctionDef {
  span: 0..48
  params: [
    Param {
      span: 8..22
      pattern: IdentPattern {
        local: @8..10
      }
      type: TypeRef {
        type: ScopeAccess {
          prefix: Identifier {
            lastNameSegment: types
            binding: Accessor {
              of: types::types
              type: Set
            }
            span: 13..17
          }
          span: 13..22
          segment: PathSegment {
            name: Foo
            span: 20..22
            binding: Accessor {
              of: types::types::Foo
              type: Get
            }
          }
        }
      }
    }
  ]
  returnType: null
  body: CallExpr {
    span: 27..48
    on: Identifier {
      lastNameSegment: println
      binding: Accessor {
        of: bento::io::println
        type: Get
      }
      span: 27..33
    }
    args: [
      StringExpr {
        span: 35..47
        content: "Foooooooooo"
      }
    ]
  }
}

======= types::main::printBar =======
FunctionDef {
  span: 0..57
  params: [
    Param {
      span: 13..40
      pattern: DestructurePattern {
        span: 13..28
        path: ScopeAccess {
          prefix: Identifier {
            lastNameSegment: types
            binding: Accessor {
              of: types::types
              type: Set
            }
            span: 13..17
          }
          span: 13..22
          segment: PathSegment {
            name: Bar
            span: 20..22
            binding: Accessor {
              of: types::types::Bar
              type: Get
            }
          }
        }
        fields: [
          IdentPattern {
            local: @24..27
          }
        ]
      }
      type: TypeRef {
        type: ScopeAccess {
          prefix: Identifier {
            lastNameSegment: types
            binding: Accessor {
              of: types::types
              type: Set
            }
            span: 31..35
          }
          span: 31..40
          segment: PathSegment {
            name: Bar
            span: 38..40
            binding: Accessor {
              of: types::types::Bar
              type: Get
            }
          }
        }
      }
    }
  ]
  returnType: null
  body: CallExpr {
    span: 45..57
    on: Identifier {
      lastNameSegment: println
      binding: Accessor {
        of: bento::io::println
        type: Get
      }
      span: 45..51
    }
    args: [
      Identifier {
        lastNameSegment: name
        binding: Accessor {
          of: @24..27
          type: Get
        }
        span: 53..56
      }
    ]
  }
}

======= types::main::main =======
FunctionDef {
  span: 0..135
  params: []
  returnType: null
  body: ScopeExpr {
    span: 13..135
    statements: [
      CallExpr {
        span: 20..34
        on: Identifier {
          lastNameSegment: foo
          binding: Accessor {
            of: types::main::foo
            type: Get
          }
          span: 20..22
        }
        args: [
          ScopeAccess {
            prefix: Identifier {
              lastNameSegment: types
              binding: Accessor {
                of: types::types
                type: Set
              }
              span: 24..28
            }
            span: 24..33
            segment: PathSegment {
              name: Foo
              span: 31..33
              binding: Accessor {
                of: types::types::Foo
                type: Get
              }
            }
          }
        ]
      }
      LetStatement {
        span: 41..72
        pattern: IdentPattern {
          local: @45..47
        }
        type: TypeRef {
          type: Identifier {
            lastNameSegment: Bar
            binding: null
            span: 50..52
          }
        }
        expr: CallExpr {
          span: 56..72
          on: ScopeAccess {
            prefix: Identifier {
              lastNameSegment: types
              binding: Accessor {
                of: types::types
                type: Set
              }
              span: 56..60
            }
            span: 56..65
            segment: PathSegment {
              name: Bar
              span: 63..65
              binding: Accessor {
                of: types::types::Bar
                type: Get
              }
            }
          }
          args: [
            StringExpr {
              span: 67..71
              content: "Bar"
            }
          ]
        }
      }
      CallExpr {
        span: 79..91
        on: Identifier {
          lastNameSegment: printBar
          binding: Accessor {
            of: types::main::printBar
            type: Get
          }
          span: 79..86
        }
        args: [
          Identifier {
            lastNameSegment: bar
            binding: Accessor {
              of: @45..47
              type: Get
            }
            span: 88..90
          }
        ]
      }
      AssignmentExpr {
        span: 98..113
        left: MemberAccessExpr {
          span: 98..105
          on: Identifier {
            lastNameSegment: bar
            binding: Accessor {
              of: @45..47
              type: Get
            }
            span: 98..100
          }
          field: name
        }
        right: StringExpr {
          span: 109..113
          content: "Baz"
        }
      }
      CallExpr {
        span: 120..132
        on: Identifier {
          lastNameSegment: printBar
          binding: Accessor {
            of: types::main::printBar
            type: Get
          }
          span: 120..127
        }
        args: [
          Identifier {
            lastNameSegment: bar
            binding: Accessor {
              of: @45..47
              type: Get
            }
            span: 129..131
          }
        ]
      }
    ]
  }
}