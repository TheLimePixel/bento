======= Function(types::main::foo) =======
FunctionDef {
  ref: FunDef@0..49
  params: [
    Param {
      ref: Param@2..17
      pattern: IdentPattern {
        ref: IdentPattern@0..3
        local: $0
      }
      type: TypeRef {
        ref: Path@4..14
        type: Path {
          ref: Path@4..14
          binding: Accessor {
            of: SingletonType {
              types::types::Foo
            }
            type: Get
          }
        }
      }
    }
  ]
  returnType: null
  body: CallExpr {
    ref: CallExpr@54..76
    on: Path {
      ref: Path@0..7
      binding: Accessor {
        of: Function {
          bento::io::println
        }
        type: Get
      }
    }
    args: [
      StringExpr {
        ref: StringLiteral@2..15
        content: "Foooooooooo"
      }
    ]
  }
}

======= Function(types::main::printBar) =======
FunctionDef {
  ref: FunDef@0..49
  params: [
    Param {
      ref: Param@2..17
      pattern: IdentPattern {
        ref: IdentPattern@0..3
        local: $0
      }
      type: TypeRef {
        ref: Path@4..14
        type: Path {
          ref: Path@4..14
          binding: Accessor {
            of: RecordType {
              types::types::Bar
            }
            type: Get
          }
        }
      }
    }
  ]
  returnType: null
  body: CallExpr {
    ref: CallExpr@64..81
    on: Path {
      ref: Path@0..7
      binding: Accessor {
        of: Function {
          bento::io::println
        }
        type: Get
      }
    }
    args: [
      MemberAccessExpr {
        ref: AccessExpr@2..10
        on: Path {
          ref: Path@0..3
          binding: Accessor {
            of: $0
            type: Get
          }
        }
        field: name
      }
    ]
  }
}

======= Function(types::main::main) =======
FunctionDef {
  ref: FunDef@0..136
  params: []
  returnType: null
  body: ScopeExpr {
    ref: ScopeExpr@26..149
    statements: [
      CallExpr {
        ref: CallExpr@14..29
        on: Path {
          ref: Path@0..3
          binding: Accessor {
            of: Function {
              types::main::foo
            }
            type: Get
          }
        }
        args: [
          Path {
            ref: Path@2..12
            binding: Accessor {
              of: SingletonType {
                types::types::Foo
              }
              type: Get
            }
          }
        ]
      }
      LetExpr {
        ref: LetExpr@56..88
        pattern: IdentPattern {
          ref: IdentPattern@8..11
          local: $0
        }
        type: null
        expr: CallExpr {
          ref: CallExpr@30..47
          on: Path {
            ref: Path@0..10
            binding: Accessor {
              of: RecordType {
                types::types::Bar
              }
              type: Get
            }
          }
          args: [
            StringExpr {
              ref: StringLiteral@2..7
              content: "Bar"
            }
          ]
        }
      }
      CallExpr {
        ref: CallExpr@132..145
        on: Path {
          ref: Path@0..8
          binding: Accessor {
            of: Function {
              types::main::printBar
            }
            type: Get
          }
        }
        args: [
          Path {
            ref: Path@2..5
            binding: Accessor {
              of: $0
              type: Get
            }
          }
        ]
      }
      AssignmentExpr {
        ref: AssignmentExpr@170..186
        left: MemberAccessExpr {
          ref: AccessExpr@0..8
          on: Path {
            ref: Path@0..3
            binding: Accessor {
              of: $0
              type: Get
            }
          }
          field: name
        }
        right: StringExpr {
          ref: StringLiteral@22..27
          content: "Baz"
        }
      }
      CallExpr {
        ref: CallExpr@214..227
        on: Path {
          ref: Path@0..8
          binding: Accessor {
            of: Function {
              types::main::printBar
            }
            type: Get
          }
        }
        args: [
          Path {
            ref: Path@2..5
            binding: Accessor {
              of: $0
              type: Get
            }
          }
        ]
      }
    ]
  }
}