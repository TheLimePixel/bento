======= nesting::main::baz =======
FunctionDef {
  ref: FunDef@0..54
  params: [
    Param {
      ref: Param@2..11
      pattern: WildcardPattern {
        ref: WildcardPattern@0..1
      }
      type: TypeRef {
        ref: Identifier@4..10
        type: RecordType {
          bento::String
        }
      }
    }
  ]
  returnType: TypeRef {
    ref: Identifier@4..10
    type: RecordType {
      bento::String
    }
  }
  body: ScopeExpr {
    ref: ScopeExpr@54..81
    statements: [
      StringExpr {
        ref: StringLiteral@14..31
        content: "Hello from Baz!"
      }
    ]
  }
}

======= nesting::main::bar =======
FunctionDef {
  ref: FunDef@0..76
  params: []
  returnType: null
  body: ScopeExpr {
    ref: ScopeExpr@20..86
    statements: [
      CallExpr {
        ref: CallExpr@14..38
        on: PathExpr {
          ref: PathExpr@0..7
          binding: Function {
            bento::io::println
          }
        }
        args: [
          CallExpr {
            ref: CallExpr@2..17
            on: PathExpr {
              ref: PathExpr@0..3
              binding: Function {
                nesting::main::baz
              }
            }
            args: [
              StringExpr {
                ref: StringLiteral@2..12
                content: "Hellope!"
              }
            ]
          }
        ]
      }
      CallExpr {
        ref: CallExpr@74..100
        on: PathExpr {
          ref: PathExpr@0..7
          binding: Function {
            bento::io::println
          }
        }
        args: [
          StringExpr {
            ref: StringLiteral@2..19
            content: "Hello from Bar!"
          }
        ]
      }
    ]
  }
}

======= nesting::main::foo =======
FunctionDef {
  ref: FunDef@0..80
  params: [
    Param {
      ref: Param@2..14
      pattern: IdentPattern {
        ref: IdentPattern@0..4
        name: text
      }
      type: TypeRef {
        ref: Identifier@4..10
        type: RecordType {
          bento::String
        }
      }
    }
  ]
  returnType: null
  body: ScopeExpr {
    ref: ScopeExpr@44..102
    statements: [
      CallExpr {
        ref: CallExpr@14..62
        on: PathExpr {
          ref: PathExpr@0..7
          binding: Function {
            bento::io::println
          }
        }
        args: [
          ScopeExpr {
            ref: ScopeExpr@2..41
            statements: [
              CallExpr {
                ref: CallExpr@22..27
                on: PathExpr {
                  ref: PathExpr@0..3
                  binding: Function {
                    nesting::main::bar
                  }
                }
                args: []
              }
              PathExpr {
                ref: PathExpr@2..6
                binding: LocalRef {
                  node: IdentPattern {
                    ref: IdentPattern@0..4
                    name: text
                  }
                }
              }
            ]
          }
        ]
      }
    ]
  }
}

======= nesting::main::main =======
FunctionDef {
  ref: FunDef@0..76
  params: []
  returnType: null
  body: ScopeExpr {
    ref: ScopeExpr@22..87
    statements: [
      CallExpr {
        ref: CallExpr@14..36
        on: PathExpr {
          ref: PathExpr@0..3
          binding: Function {
            nesting::main::foo
          }
        }
        args: [
          StringExpr {
            ref: StringLiteral@2..19
            content: "Hello from Foo!"
          }
        ]
      }
      CallExpr {
        ref: CallExpr@70..97
        on: PathExpr {
          ref: PathExpr@0..7
          binding: Function {
            bento::io::println
          }
        }
        args: [
          StringExpr {
            ref: StringLiteral@2..20
            content: "Hello from Main!"
          }
        ]
      }
    ]
  }
}