======= nesting::main::baz =======
FunctionDef {
  span: 0..45
  params: [
    Param {
      span: 2..10
      pattern: WildcardPattern {
        span: 0..0
      }
      type: TypeRef {
        span: 4..9
        type: Path {
          span: 4..9
          binding: Accessor {
            of: bento::String
            type: Get
          }
        }
      }
    }
  ]
  returnType: TypeRef {
    span: 4..9
    type: Path {
      span: 4..9
      binding: Accessor {
        of: bento::String
        type: Get
      }
    }
  }
  body: StringExpr {
    span: 58..74
    content: "Hello from Baz!"
  }
}

======= nesting::main::bar =======
FunctionDef {
  span: 100..177
  params: []
  returnType: null
  body: ScopeExpr {
    span: 24..89
    statements: [
      CallExpr {
        span: 14..37
        on: Path {
          span: 0..6
          binding: Accessor {
            of: bento::io::println
            type: Get
          }
        }
        args: [
          CallExpr {
            span: 2..16
            on: Path {
              span: 0..2
              binding: Accessor {
                of: nesting::main::baz
                type: Get
              }
            }
            args: [
              StringExpr {
                span: 2..11
                content: "Hellope!"
              }
            ]
          }
        ]
      }
      CallExpr {
        span: 74..99
        on: Path {
          span: 0..6
          binding: Accessor {
            of: bento::io::println
            type: Get
          }
        }
        args: [
          StringExpr {
            span: 2..18
            content: "Hello from Bar!"
          }
        ]
      }
    ]
  }
}

======= nesting::main::foo =======
FunctionDef {
  span: 264..340
  params: [
    Param {
      span: 2..13
      pattern: IdentPattern {
        span: 0..3
        local: $0
      }
      type: TypeRef {
        span: 4..9
        type: Path {
          span: 4..9
          binding: Accessor {
            of: bento::String
            type: Get
          }
        }
      }
    }
  ]
  returnType: null
  body: CallExpr {
    span: 58..105
    on: Path {
      span: 0..6
      binding: Accessor {
        of: bento::io::println
        type: Get
      }
    }
    args: [
      ScopeExpr {
        span: 2..40
        statements: [
          CallExpr {
            span: 22..26
            on: Path {
              span: 0..2
              binding: Accessor {
                of: nesting::main::bar
                type: Get
              }
            }
            args: []
          }
          Path {
            span: 2..5
            binding: Accessor {
              of: $0
              type: Get
            }
          }
        ]
      }
    ]
  }
}

======= nesting::main::main =======
FunctionDef {
  span: 426..503
  params: []
  returnType: null
  body: ScopeExpr {
    span: 26..90
    statements: [
      CallExpr {
        span: 14..35
        on: Path {
          span: 0..2
          binding: Accessor {
            of: nesting::main::foo
            type: Get
          }
        }
        args: [
          StringExpr {
            span: 2..18
            content: "Hello from Foo!"
          }
        ]
      }
      CallExpr {
        span: 70..96
        on: Path {
          span: 0..6
          binding: Accessor {
            of: bento::io::println
            type: Get
          }
        }
        args: [
          StringExpr {
            span: 2..19
            content: "Hello from Main!"
          }
        ]
      }
    ]
  }
}