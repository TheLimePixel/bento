======= Function(nesting::main::baz) =======
FunctionDef {
  ref: FunDef@0..46
  params: [
    Param {
      ref: Param@2..11
      pattern: WildcardPattern {
        ref: WildcardPattern@0..1
      }
      type: TypeRef {
        ref: Path@4..10
        type: RecordType {
          bento::String
        }
      }
    }
  ]
  returnType: TypeRef {
    ref: Path@4..10
    type: RecordType {
      bento::String
    }
  }
  body: StringExpr {
    ref: StringLiteral@58..75
    content: "Hello from Baz!"
  }
}

======= Function(nesting::main::bar) =======
FunctionDef {
  ref: FunDef@0..78
  params: []
  returnType: null
  body: ScopeExpr {
    ref: ScopeExpr@24..90
    statements: [
      CallExpr {
        ref: CallExpr@14..38
        on: PathExpr {
          ref: Path@0..7
          binding: Function {
            bento::io::println
          }
        }
        args: [
          CallExpr {
            ref: CallExpr@2..17
            on: PathExpr {
              ref: Path@0..3
              binding: Function {
                nesting::main::baz
              }
            }
            args: [
              StringExpr {
                ref: StringLiteral@2..12
                content: "Hellope!"
              }
            ]
          }
        ]
      }
      CallExpr {
        ref: CallExpr@74..100
        on: PathExpr {
          ref: Path@0..7
          binding: Function {
            bento::io::println
          }
        }
        args: [
          StringExpr {
            ref: StringLiteral@2..19
            content: "Hello from Bar!"
          }
        ]
      }
    ]
  }
}

======= Function(nesting::main::foo) =======
FunctionDef {
  ref: FunDef@0..77
  params: [
    Param {
      ref: Param@2..14
      pattern: IdentPattern {
        ref: IdentPattern@0..4
        local: $0
      }
      type: TypeRef {
        ref: Path@4..10
        type: RecordType {
          bento::String
        }
      }
    }
  ]
  returnType: null
  body: CallExpr {
    ref: CallExpr@58..106
    on: PathExpr {
      ref: Path@0..7
      binding: Function {
        bento::io::println
      }
    }
    args: [
      ScopeExpr {
        ref: ScopeExpr@2..41
        statements: [
          CallExpr {
            ref: CallExpr@22..27
            on: PathExpr {
              ref: Path@0..3
              binding: Function {
                nesting::main::bar
              }
            }
            args: []
          }
          PathExpr {
            ref: Path@2..6
            binding: AccessorRef {
              of: $0
              type: Getter
            }
          }
        ]
      }
    ]
  }
}

======= Function(nesting::main::main) =======
FunctionDef {
  ref: FunDef@0..78
  params: []
  returnType: null
  body: ScopeExpr {
    ref: ScopeExpr@26..91
    statements: [
      CallExpr {
        ref: CallExpr@14..36
        on: PathExpr {
          ref: Path@0..3
          binding: Function {
            nesting::main::foo
          }
        }
        args: [
          StringExpr {
            ref: StringLiteral@2..19
            content: "Hello from Foo!"
          }
        ]
      }
      CallExpr {
        ref: CallExpr@70..97
        on: PathExpr {
          ref: Path@0..7
          binding: Function {
            bento::io::println
          }
        }
        args: [
          StringExpr {
            ref: StringLiteral@2..20
            content: "Hello from Main!"
          }
        ]
      }
    ]
  }
}