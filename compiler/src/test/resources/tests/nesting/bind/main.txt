======= Function(nesting::main::baz) =======
FunctionDef {
  span: 0..46
  params: [
    Param {
      span: 2..11
      pattern: WildcardPattern {
        span: 0..1
      }
      type: TypeRef {
        span: 4..10
        type: Path {
          span: 4..10
          binding: Accessor {
            of: RecordType {
              bento::String
            }
            type: Get
          }
        }
      }
    }
  ]
  returnType: TypeRef {
    span: 4..10
    type: Path {
      span: 4..10
      binding: Accessor {
        of: RecordType {
          bento::String
        }
        type: Get
      }
    }
  }
  body: StringExpr {
    span: 58..75
    content: "Hello from Baz!"
  }
}

======= Function(nesting::main::bar) =======
FunctionDef {
  span: 0..78
  params: []
  returnType: null
  body: ScopeExpr {
    span: 24..90
    statements: [
      CallExpr {
        span: 14..38
        on: Path {
          span: 0..7
          binding: Accessor {
            of: Function {
              bento::io::println
            }
            type: Get
          }
        }
        args: [
          CallExpr {
            span: 2..17
            on: Path {
              span: 0..3
              binding: Accessor {
                of: Function {
                  nesting::main::baz
                }
                type: Get
              }
            }
            args: [
              StringExpr {
                span: 2..12
                content: "Hellope!"
              }
            ]
          }
        ]
      }
      CallExpr {
        span: 74..100
        on: Path {
          span: 0..7
          binding: Accessor {
            of: Function {
              bento::io::println
            }
            type: Get
          }
        }
        args: [
          StringExpr {
            span: 2..19
            content: "Hello from Bar!"
          }
        ]
      }
    ]
  }
}

======= Function(nesting::main::foo) =======
FunctionDef {
  span: 0..77
  params: [
    Param {
      span: 2..14
      pattern: IdentPattern {
        span: 0..4
        local: $0
      }
      type: TypeRef {
        span: 4..10
        type: Path {
          span: 4..10
          binding: Accessor {
            of: RecordType {
              bento::String
            }
            type: Get
          }
        }
      }
    }
  ]
  returnType: null
  body: CallExpr {
    span: 58..106
    on: Path {
      span: 0..7
      binding: Accessor {
        of: Function {
          bento::io::println
        }
        type: Get
      }
    }
    args: [
      ScopeExpr {
        span: 2..41
        statements: [
          CallExpr {
            span: 22..27
            on: Path {
              span: 0..3
              binding: Accessor {
                of: Function {
                  nesting::main::bar
                }
                type: Get
              }
            }
            args: []
          }
          Path {
            span: 2..6
            binding: Accessor {
              of: $0
              type: Get
            }
          }
        ]
      }
    ]
  }
}

======= Function(nesting::main::main) =======
FunctionDef {
  span: 0..78
  params: []
  returnType: null
  body: ScopeExpr {
    span: 26..91
    statements: [
      CallExpr {
        span: 14..36
        on: Path {
          span: 0..3
          binding: Accessor {
            of: Function {
              nesting::main::foo
            }
            type: Get
          }
        }
        args: [
          StringExpr {
            span: 2..19
            content: "Hello from Foo!"
          }
        ]
      }
      CallExpr {
        span: 70..97
        on: Path {
          span: 0..7
          binding: Accessor {
            of: Function {
              bento::io::println
            }
            type: Get
          }
        }
        args: [
          StringExpr {
            span: 2..20
            content: "Hello from Main!"
          }
        ]
      }
    ]
  }
}