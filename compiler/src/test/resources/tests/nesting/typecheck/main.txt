======= nesting::main::baz =======
ScopeExpr {
  ref: ScopeExpr@54..81
  type: RecordType {
    bento::String
  }
  statements: [
    StringExpr {
      ref: StringLiteral@14..31
      content: "Hello from Baz!"
    }
  ]
}

======= nesting::main::bar =======
ScopeExpr {
  ref: ScopeExpr@20..86
  type: SingletonType {
    bento::Unit
  }
  statements: [
    CallExpr {
      ref: CallExpr@14..38
      type: SingletonType {
        bento::Unit
      }
      fn: Function {
        bento::io::println
      }
      args: [
        CallExpr {
          ref: CallExpr@2..17
          type: RecordType {
            bento::String
          }
          fn: Function {
            nesting::main::baz
          }
          args: [
            StringExpr {
              ref: StringLiteral@2..12
              content: "Hellope!"
            }
          ]
        }
      ]
    }
    CallExpr {
      ref: CallExpr@74..100
      type: SingletonType {
        bento::Unit
      }
      fn: Function {
        bento::io::println
      }
      args: [
        StringExpr {
          ref: StringLiteral@2..19
          content: "Hello from Bar!"
        }
      ]
    }
  ]
}

======= nesting::main::foo =======
ScopeExpr {
  ref: ScopeExpr@44..102
  type: SingletonType {
    bento::Unit
  }
  statements: [
    CallExpr {
      ref: CallExpr@14..62
      type: SingletonType {
        bento::Unit
      }
      fn: Function {
        bento::io::println
      }
      args: [
        ScopeExpr {
          ref: ScopeExpr@2..41
          type: RecordType {
            bento::String
          }
          statements: [
            CallExpr {
              ref: CallExpr@22..27
              type: SingletonType {
                bento::Unit
              }
              fn: Function {
                nesting::main::bar
              }
              args: []
            }
            LocalAccessExpr {
              ref: PathExpr@2..6
              type: RecordType {
                bento::String
              }
              binding: LocalRef {
                node: IdentPattern {
                  ref: IdentPattern@0..4
                  name: text
                }
              }
            }
          ]
        }
      ]
    }
  ]
}

======= nesting::main::main =======
ScopeExpr {
  ref: ScopeExpr@22..87
  type: SingletonType {
    bento::Unit
  }
  statements: [
    CallExpr {
      ref: CallExpr@14..36
      type: SingletonType {
        bento::Unit
      }
      fn: Function {
        nesting::main::foo
      }
      args: [
        StringExpr {
          ref: StringLiteral@2..19
          content: "Hello from Foo!"
        }
      ]
    }
    CallExpr {
      ref: CallExpr@70..97
      type: SingletonType {
        bento::Unit
      }
      fn: Function {
        bento::io::println
      }
      args: [
        StringExpr {
          ref: StringLiteral@2..20
          content: "Hello from Main!"
        }
      ]
    }
  ]
}